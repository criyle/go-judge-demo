// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DemoBackendClient is the client API for DemoBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoBackendClient interface {
	Submission(ctx context.Context, in *SubmissionRequest, opts ...grpc.CallOption) (*SubmissionResponse, error)
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error)
	Updates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (DemoBackend_UpdatesClient, error)
	Judge(ctx context.Context, opts ...grpc.CallOption) (DemoBackend_JudgeClient, error)
	Shell(ctx context.Context, opts ...grpc.CallOption) (DemoBackend_ShellClient, error)
}

type demoBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoBackendClient(cc grpc.ClientConnInterface) DemoBackendClient {
	return &demoBackendClient{cc}
}

func (c *demoBackendClient) Submission(ctx context.Context, in *SubmissionRequest, opts ...grpc.CallOption) (*SubmissionResponse, error) {
	out := new(SubmissionResponse)
	err := c.cc.Invoke(ctx, "/pb.DemoBackend/Submission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoBackendClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error) {
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, "/pb.DemoBackend/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoBackendClient) Updates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (DemoBackend_UpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &DemoBackend_ServiceDesc.Streams[0], "/pb.DemoBackend/Updates", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoBackendUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DemoBackend_UpdatesClient interface {
	Recv() (*JudgeUpdate, error)
	grpc.ClientStream
}

type demoBackendUpdatesClient struct {
	grpc.ClientStream
}

func (x *demoBackendUpdatesClient) Recv() (*JudgeUpdate, error) {
	m := new(JudgeUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoBackendClient) Judge(ctx context.Context, opts ...grpc.CallOption) (DemoBackend_JudgeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DemoBackend_ServiceDesc.Streams[1], "/pb.DemoBackend/Judge", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoBackendJudgeClient{stream}
	return x, nil
}

type DemoBackend_JudgeClient interface {
	Send(*JudgeClientResponse) error
	Recv() (*JudgeClientRequest, error)
	grpc.ClientStream
}

type demoBackendJudgeClient struct {
	grpc.ClientStream
}

func (x *demoBackendJudgeClient) Send(m *JudgeClientResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoBackendJudgeClient) Recv() (*JudgeClientRequest, error) {
	m := new(JudgeClientRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoBackendClient) Shell(ctx context.Context, opts ...grpc.CallOption) (DemoBackend_ShellClient, error) {
	stream, err := c.cc.NewStream(ctx, &DemoBackend_ServiceDesc.Streams[2], "/pb.DemoBackend/Shell", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoBackendShellClient{stream}
	return x, nil
}

type DemoBackend_ShellClient interface {
	Send(*ShellInput) error
	Recv() (*ShellOutput, error)
	grpc.ClientStream
}

type demoBackendShellClient struct {
	grpc.ClientStream
}

func (x *demoBackendShellClient) Send(m *ShellInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoBackendShellClient) Recv() (*ShellOutput, error) {
	m := new(ShellOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoBackendServer is the server API for DemoBackend service.
// All implementations must embed UnimplementedDemoBackendServer
// for forward compatibility
type DemoBackendServer interface {
	Submission(context.Context, *SubmissionRequest) (*SubmissionResponse, error)
	Submit(context.Context, *SubmitRequest) (*SubmitResponse, error)
	Updates(*emptypb.Empty, DemoBackend_UpdatesServer) error
	Judge(DemoBackend_JudgeServer) error
	Shell(DemoBackend_ShellServer) error
	mustEmbedUnimplementedDemoBackendServer()
}

// UnimplementedDemoBackendServer must be embedded to have forward compatible implementations.
type UnimplementedDemoBackendServer struct {
}

func (UnimplementedDemoBackendServer) Submission(context.Context, *SubmissionRequest) (*SubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submission not implemented")
}
func (UnimplementedDemoBackendServer) Submit(context.Context, *SubmitRequest) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedDemoBackendServer) Updates(*emptypb.Empty, DemoBackend_UpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method Updates not implemented")
}
func (UnimplementedDemoBackendServer) Judge(DemoBackend_JudgeServer) error {
	return status.Errorf(codes.Unimplemented, "method Judge not implemented")
}
func (UnimplementedDemoBackendServer) Shell(DemoBackend_ShellServer) error {
	return status.Errorf(codes.Unimplemented, "method Shell not implemented")
}
func (UnimplementedDemoBackendServer) mustEmbedUnimplementedDemoBackendServer() {}

// UnsafeDemoBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoBackendServer will
// result in compilation errors.
type UnsafeDemoBackendServer interface {
	mustEmbedUnimplementedDemoBackendServer()
}

func RegisterDemoBackendServer(s grpc.ServiceRegistrar, srv DemoBackendServer) {
	s.RegisterService(&DemoBackend_ServiceDesc, srv)
}

func _DemoBackend_Submission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoBackendServer).Submission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DemoBackend/Submission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoBackendServer).Submission(ctx, req.(*SubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoBackend_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoBackendServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DemoBackend/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoBackendServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoBackend_Updates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoBackendServer).Updates(m, &demoBackendUpdatesServer{stream})
}

type DemoBackend_UpdatesServer interface {
	Send(*JudgeUpdate) error
	grpc.ServerStream
}

type demoBackendUpdatesServer struct {
	grpc.ServerStream
}

func (x *demoBackendUpdatesServer) Send(m *JudgeUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _DemoBackend_Judge_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoBackendServer).Judge(&demoBackendJudgeServer{stream})
}

type DemoBackend_JudgeServer interface {
	Send(*JudgeClientRequest) error
	Recv() (*JudgeClientResponse, error)
	grpc.ServerStream
}

type demoBackendJudgeServer struct {
	grpc.ServerStream
}

func (x *demoBackendJudgeServer) Send(m *JudgeClientRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoBackendJudgeServer) Recv() (*JudgeClientResponse, error) {
	m := new(JudgeClientResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DemoBackend_Shell_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoBackendServer).Shell(&demoBackendShellServer{stream})
}

type DemoBackend_ShellServer interface {
	Send(*ShellOutput) error
	Recv() (*ShellInput, error)
	grpc.ServerStream
}

type demoBackendShellServer struct {
	grpc.ServerStream
}

func (x *demoBackendShellServer) Send(m *ShellOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoBackendShellServer) Recv() (*ShellInput, error) {
	m := new(ShellInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoBackend_ServiceDesc is the grpc.ServiceDesc for DemoBackend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DemoBackend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DemoBackend",
	HandlerType: (*DemoBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submission",
			Handler:    _DemoBackend_Submission_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _DemoBackend_Submit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Updates",
			Handler:       _DemoBackend_Updates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Judge",
			Handler:       _DemoBackend_Judge_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Shell",
			Handler:       _DemoBackend_Shell_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "demo_backend.proto",
}
